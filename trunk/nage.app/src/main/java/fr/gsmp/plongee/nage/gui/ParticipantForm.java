/*
 * ParticipantForm.java
 *
 * Created on __DATE__, __TIME__
 */

package fr.gsmp.plongee.nage.gui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.JTextField;
import javax.swing.SpinnerDateModel;

import org.springframework.context.support.ClassPathXmlApplicationContext;

import fr.gsmp.plongee.nage.dao.data.Categorie;
import fr.gsmp.plongee.nage.dao.data.Categorieage;
import fr.gsmp.plongee.nage.dao.data.Course;
import fr.gsmp.plongee.nage.dao.data.Participants;
import fr.gsmp.plongee.nage.services.manager.CategorieAgeManager;
import fr.gsmp.plongee.nage.services.manager.CategorieManager;
import fr.gsmp.plongee.nage.services.manager.CourseManager;
import fr.gsmp.plongee.nage.services.manager.ParticipantsManager;

/**
 * 
 * @author __USER__
 */
public class ParticipantForm extends javax.swing.JDialog {

	/**
	 * 
	 */
	private static final long serialVersionUID = 8337886654048114870L;
	private CourseManager cm;
	/*
	 * private ComboBoxModel courseComboBoxmodel; private ComboBoxModel
	 * categorieAgeComboBoxmodel; private ComboBoxModel categorieComboBoxmodel;
	 */
	private CategorieManager catm;
	private CategorieAgeManager catagem;
	private JComboBox sexeCombox;
	private JTextField enapTextFiled;
	private JButton saveButton;
	private JButton deleteButton;
	private ParticipantsManager pm;
	private JSpinner datePicker;
	private List<ActionListener> listeners = new ArrayList<ActionListener>();
	private JComboBox competComboBox;
	private JLabel competLabel;

	/**
	 * @param l
	 *            ActionListener
	 */
	public void addActionListener(final ActionListener l) {
		listeners.add(l);
	}

	/**
	 * Listeners subscriptions
	 * 
	 * @param e
	 *            ActionEvent
	 */
	private void notifyListeners(final ActionEvent e) {
		for (ActionListener l : listeners) {
			l.actionPerformed(e);
		}
	}

	/** Creates new form ParticipantForm */
	public ParticipantForm(java.awt.Frame parent, boolean modal) {
		super(parent, modal);
		ClassPathXmlApplicationContext ctx = new ClassPathXmlApplicationContext(
				"classpath:applicationContextServices.xml");

		cm = (CourseManager) ctx.getBean("courseManagerImpl");
		catm = (CategorieManager) ctx.getBean("categorieManagerImpl");
		catagem = (CategorieAgeManager) ctx.getBean("categorieAgeManagerImpl");
		pm = (ParticipantsManager) ctx.getBean("participantsManagerImpl");

		initComponents();
		loadComboBoxModel();

		if (participant != null) {
			participant = pm.getParticipantById(participant.getParticipantid());
			modelToPresentation();
		}
	}

	private void loadComboBoxModel() {
		List<Course> courses = cm.getAllCourses();
		List<Categorie> categories = catm.getAllCategorie();
		List<Categorieage> categoriesage = catagem.getAllCategorieage();

		for (Course course : courses) {
			courseComboBox.addItem(course);

		}

		for (Categorie categorie : categories) {
			categorieComboBox.addItem(categorie);
		}

		for (Categorieage categorie : categoriesage) {
			categorieAgeComboBox.addItem(categorie);

		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// GEN-BEGIN:initComponents
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {
		datePicker = new JSpinner(new SpinnerDateModel());
		JSpinner.DateEditor timeTextField = new JSpinner.DateEditor(datePicker,
				"dd/MM/yyyy");
		datePicker.setEditor(timeTextField);

		nomLabel = new javax.swing.JLabel();
		nomTextField = new javax.swing.JTextField();
		prenomLabel = new javax.swing.JLabel();
		prenomTextField = new javax.swing.JTextField();
		dateLabel = new javax.swing.JLabel();
		sexLabel = new javax.swing.JLabel();
		sexeCombox = new javax.swing.JComboBox();
		clubLabel = new javax.swing.JLabel();
		clubTextField = new javax.swing.JTextField();
		licenceLabel = new javax.swing.JLabel();
		licenceTextField = new javax.swing.JTextField();
		enapLabel = new javax.swing.JLabel();
		enapTextFiled = new javax.swing.JTextField();
		courseLabel = new javax.swing.JLabel();
		courseComboBox = new javax.swing.JComboBox();
		competLabel = new javax.swing.JLabel();
		competComboBox = new javax.swing.JComboBox();
		categorieLabel = new javax.swing.JLabel();
		categorieComboBox = new javax.swing.JComboBox();
		categorieageLabel = new javax.swing.JLabel();
		categorieAgeComboBox = new javax.swing.JComboBox();
		tubaLabel = new javax.swing.JLabel();
		tubaTextfield = new javax.swing.JFormattedTextField();
		saveButton = new JButton();
		deleteButton = new JButton();
		
		
		competLabel.setText("Compétition");
		competComboBox.setModel(new javax.swing.DefaultComboBoxModel(
				new String[] { "oui", "non" }));

		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
		setTitle("Participant");
		getContentPane().setLayout(new java.awt.GridLayout(15, 0));

		nomLabel.setText("Nom :");
		getContentPane().add(nomLabel);

		sexeCombox.setModel(new javax.swing.DefaultComboBoxModel(
				new String[] { "Homme", "Femme" }));
		
		getContentPane().add(nomTextField);

		prenomLabel.setText("Pr\u00e9nom :");
		getContentPane().add(prenomLabel);

		getContentPane().add(prenomTextField);

		dateLabel.setText("Date de naissance :");
		getContentPane().add(dateLabel);

		getContentPane().add(datePicker);

		sexLabel.setText("Sexe :");
		getContentPane().add(sexLabel);

		getContentPane().add(sexeCombox);

		clubLabel.setText("Club :");
		getContentPane().add(clubLabel);

		getContentPane().add(clubTextField);

		licenceLabel.setText("N\u00b0 de licence :");
		getContentPane().add(licenceLabel);

		getContentPane().add(licenceTextField);

		enapLabel.setText("N\u00b0 e-nap :");
		getContentPane().add(competLabel);
		getContentPane().add(competComboBox);

		getContentPane().add(enapLabel);

		getContentPane().add(enapTextFiled);

		courseLabel.setText("Course :");
		getContentPane().add(courseLabel);

		getContentPane().add(courseComboBox);

		categorieLabel.setText("Cat\u00e9gorie :");
		getContentPane().add(categorieLabel);

		getContentPane().add(categorieComboBox);

		categorieageLabel.setText("Cat\u00e9gorie \u00e2ge :");
		getContentPane().add(categorieageLabel);

		getContentPane().add(categorieAgeComboBox);

		tubaLabel.setText("N\u00b0 de tuba :");
		getContentPane().add(tubaLabel);

		getContentPane().add(tubaTextfield);

		saveButton.setText("Sauver");
		saveButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				saveButtonActionPerformed(evt);
			}

			private void saveButtonActionPerformed(ActionEvent evt) {
				try {
					presentationToModel();
					pm.save(participant);

					ParticipantForm.this.setVisible(false);
					ParticipantForm.this.dispatchEvent(new WindowEvent(
							ParticipantForm.this, WindowEvent.WINDOW_CLOSING));

					ActionEvent e;
					e = new ActionEvent(this, ActionEvent.ACTION_PERFORMED,
							"SAVE");
					notifyListeners(e);

				} catch (Exception e) {
					e.printStackTrace();
				}

			}
		});
		getContentPane().add(saveButton);
		deleteButton.setText("Supprimer");
		getContentPane().add(deleteButton);

		deleteButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				deleteButtonActionPerformed(evt);
			}

			private void deleteButtonActionPerformed(ActionEvent evt) {
				try {
					final int reponse = JOptionPane.showConfirmDialog(
							null,

							"Êtes vous sur de vouloir supprimer "
									+ participant.getParticipantprenom() + " "
									+ participant.getParticipantnom() + " ?",
							"Supprimer un participant",
							JOptionPane.YES_NO_OPTION);
					if (reponse == JOptionPane.YES_OPTION) {
						pm.delete(participant);

						ParticipantForm.this.setVisible(false);
						ParticipantForm.this.dispatchEvent(new WindowEvent(
								ParticipantForm.this,
								WindowEvent.WINDOW_CLOSING));

						ActionEvent e;
						e = new ActionEvent(this, ActionEvent.ACTION_PERFORMED,
								"SAVE");
						notifyListeners(e);
					}
				} catch (Exception e) {
					e.printStackTrace();
				}

			}
		});

		pack();
	}// </editor-fold>

	// GEN-END:initComponents

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				ParticipantForm dialog = new ParticipantForm(
						new javax.swing.JFrame(), true);
				dialog.addWindowListener(new java.awt.event.WindowAdapter() {
					public void windowClosing(java.awt.event.WindowEvent e) {
						System.exit(0);
					}
				});
				dialog.setVisible(true);
			}
		});
	}

	// GEN-BEGIN:variables
	// Variables declaration - do not modify
	private javax.swing.JLabel categorieLabel;
	private javax.swing.JLabel categorieageLabel;
	private javax.swing.JLabel clubLabel;
	private javax.swing.JLabel courseLabel;
	private javax.swing.JLabel dateLabel;
	private javax.swing.JLabel enapLabel;

	private JTextField tubaTextfield;
	private javax.swing.JTextField nomTextField;
	private javax.swing.JTextField prenomTextField;

	private javax.swing.JLabel licenceLabel;
	private javax.swing.JLabel nomLabel;
	private javax.swing.JLabel prenomLabel;
	private javax.swing.JLabel sexLabel;
	private javax.swing.JLabel tubaLabel;
	private Participants participant;
	private JComboBox courseComboBox;
	private JComboBox categorieComboBox;
	private JComboBox categorieAgeComboBox;
	private JTextField licenceTextField;
	private JTextField clubTextField;

	// End of variables declaration//GEN-END:variables
	public void setParticipant(Participants participant) {
		this.participant = pm
				.getParticipantById(participant.getParticipantid());
		;
		this.modelToPresentation();
	}

	private JComboBox getCourseComboBox() {
		if (courseComboBox == null) {
			courseComboBox = new JComboBox();
			for (Course course : cm.getAllCourses()) {
				courseComboBox.addItem(course);
			}

		}
		return courseComboBox;
	}

	private void modelToPresentation() {
		nomTextField.setText(participant.getParticipantnom());
		prenomTextField.setText(participant.getParticipantprenom());
		clubTextField.setText(participant.getParticipantclub());
		licenceTextField.setText(participant.getParticipantlicence());
		getCourseComboBox().setSelectedItem(participant.getCourse());
		categorieComboBox.setSelectedItem(participant.getCategorie());
		enapTextFiled.setText(participant.getEnapNumber());
		tubaTextfield.setText(participant.getTubaNumber().toString());
		sexeCombox.setSelectedItem(participant.getSexe());
		
		if(participant.getParticipantcompet())
			competComboBox.setSelectedItem("oui");
		else
			competComboBox.setSelectedItem("non");
		datePicker.setValue(participant.getParticipantdatenaissance());
		categorieAgeComboBox.setSelectedItem(participant.getCategorieage());
	}

	private void presentationToModel() {
		if (participant == null)
			participant = new Participants();
		else
			participant = pm.getParticipantById(participant.getParticipantid());
		participant.setParticipantnom(nomTextField.getText());
		participant.setParticipantprenom(prenomTextField.getText());
		participant.setParticipantlicence(licenceTextField.getText());
		participant.setParticipantclub(clubTextField.getText());
		participant.setEnapNumber(enapTextFiled.getText());
		participant.setCourse((Course) courseComboBox.getSelectedItem());
		participant.setCategorie((Categorie) categorieComboBox
				.getSelectedItem());
		participant.setCategorieage((Categorieage) categorieAgeComboBox
				.getSelectedItem());
		try{
		participant.setTubaNumber(new Integer(tubaTextfield.getText()));
		}catch(Exception e){
			
		}
		participant.setParticipantdatenaissance((Date) datePicker.getValue());
		participant.setSexe(sexeCombox.getSelectedItem().toString());
		if(competComboBox.getSelectedItem().toString().equalsIgnoreCase("oui"))
			participant.setParticipantcompet(true);
		else
			participant.setParticipantcompet(false);
			

	}

}